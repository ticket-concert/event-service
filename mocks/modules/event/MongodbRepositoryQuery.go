// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	helpers "event-service/internal/pkg/helpers"

	mock "github.com/stretchr/testify/mock"

	request "event-service/internal/modules/event/models/request"
)

// MongodbRepositoryQuery is an autogenerated mock type for the MongodbRepositoryQuery type
type MongodbRepositoryQuery struct {
	mock.Mock
}

// FindAllEvent provides a mock function with given fields: ctx, payload
func (_m *MongodbRepositoryQuery) FindAllEvent(ctx context.Context, payload request.AllEventReq) <-chan helpers.Result {
	ret := _m.Called(ctx, payload)

	if len(ret) == 0 {
		panic("no return value specified for FindAllEvent")
	}

	var r0 <-chan helpers.Result
	if rf, ok := ret.Get(0).(func(context.Context, request.AllEventReq) <-chan helpers.Result); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan helpers.Result)
		}
	}

	return r0
}

// FindEventByName provides a mock function with given fields: ctx, name
func (_m *MongodbRepositoryQuery) FindEventByName(ctx context.Context, name string) <-chan helpers.Result {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for FindEventByName")
	}

	var r0 <-chan helpers.Result
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan helpers.Result); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan helpers.Result)
		}
	}

	return r0
}

// FindEventByTag provides a mock function with given fields: ctx, tag
func (_m *MongodbRepositoryQuery) FindEventByTag(ctx context.Context, tag string) <-chan helpers.Result {
	ret := _m.Called(ctx, tag)

	if len(ret) == 0 {
		panic("no return value specified for FindEventByTag")
	}

	var r0 <-chan helpers.Result
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan helpers.Result); ok {
		r0 = rf(ctx, tag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan helpers.Result)
		}
	}

	return r0
}

// NewMongodbRepositoryQuery creates a new instance of MongodbRepositoryQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMongodbRepositoryQuery(t interface {
	mock.TestingT
	Cleanup(func())
}) *MongodbRepositoryQuery {
	mock := &MongodbRepositoryQuery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
