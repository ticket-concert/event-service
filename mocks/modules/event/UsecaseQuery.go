// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	request "event-service/internal/modules/event/models/request"

	response "event-service/internal/modules/event/models/response"
)

// UsecaseQuery is an autogenerated mock type for the UsecaseQuery type
type UsecaseQuery struct {
	mock.Mock
}

// FindEvents provides a mock function with given fields: origCtx, payload
func (_m *UsecaseQuery) FindEvents(origCtx context.Context, payload request.AllEventReq) (*response.EventResp, error) {
	ret := _m.Called(origCtx, payload)

	if len(ret) == 0 {
		panic("no return value specified for FindEvents")
	}

	var r0 *response.EventResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.AllEventReq) (*response.EventResp, error)); ok {
		return rf(origCtx, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.AllEventReq) *response.EventResp); ok {
		r0 = rf(origCtx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.EventResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.AllEventReq) error); ok {
		r1 = rf(origCtx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUsecaseQuery creates a new instance of UsecaseQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsecaseQuery(t interface {
	mock.TestingT
	Cleanup(func())
}) *UsecaseQuery {
	mock := &UsecaseQuery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
